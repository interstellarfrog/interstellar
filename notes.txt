Sentences in Quotes Are Copied From https://os.phil-opp.com/
Other Sentences Are Written In My Own Words

## Target Json file
This Is Used To Make A Custom Target For Building The OS As We Want To Run For Bare Metal
My Build
host: x86_64-pc-windows-msvc
release: 1.71.0-nightly

Target Build
To Avoid Linker Errors We Want To Cross Compile Our Code Using Our Custom Target.


# Instead Of Using The OS Default Linker We Use The Cross Platform LLD Linker That Comes With Rust
"linker-flavor": "ld.lld",
"linker": "rust-lld",

# Since We Cannot Unwind The Stack We Abort Instead
"panic-strategy": "abort",

# The Redzone Is An Area Below A Function (128 bytes) That Is Used For Temp Data But In Our Case That Will Overwrite Important Data That We Need
# For Example Interrupts Or Exceptions When They Happen The Data Inside Of The Redzone Will Be OverWritten And Will Cause The Function To Break - Stack Corruption
"disable-redzone": true,

# mmx And sse Is For SIMD Instructions Which Can Make Programs Faster But Using The SIMD Registers In Our Kernel Will Cause It To Slow Down
# As The Kernel Needs To Restore The Registers To Their Original State Before Continuing A Program After An Interrupt
# This Means That The Kernel Has To Save The Whole SIMD State To The Main Memory On Each System Call Or Hardware Interrupt
# But Since We Are Removing Support For The SSE Registers This Causes A Problem As The Rust Core Lib Uses These For Floats So We Add soft-float To Tell LLVM To Fix This
# Which Does Cause A Slight Slow Down But Should Be Faster Overall
"features": "-mmx,-sse,+soft-float",

## VGA Text Mode
Buffer Address Is Located at 0xb8000 for Color - Memory Mapped I/O
0xb0000 for monochrome
This Is The Easiest Way Of Printing To The Screen As All We Have To Do Is Write To A Memory Location Which In Turn Actually Writes 

## Volatile
In Future Rust Updates The Compiler Might Optimize The Code Even More So Our Writes To The VGA Buffer Might Be Removed By The Compiler
If It Does Not Think That It Is Needed - It Just Sees That We Are Writing To A Memory Location

"The volatile keyword indicates that a value may change between different accesses, even if it does not appear to be modified."
"This keyword prevents an optimizing compiler from optimizing away subsequent reads or writes and thus incorrectly reusing a stale value or omitting writes."

## Lazy Static
"To provide a global writer that can be used as an interface from other modules without carrying a Writer instance around, we try to create a static WRITER"
But This Fails Because Rusts Constant evaluator Can't Convert Raw Pointers Into References At Compile Time
So Instead We Use The Lazy Static Crate
"Instead of computing its value at compile time, the static lazily initializes itself when accessed for the first time. Thus, the initialization happens at runtime, so arbitrarily complex initialization code is possible."

## SpinLock
Used To Manage Access Between Shared Resources
Can Be Used To Lock A Resource And Other Programs Will Constantly Run A Loop Requesting Access (But It Will Only Run The Programs Loops Seperatly) 
And When The Program Is Free The Thread/Program Trying To Access It Will Be Given Access

## Testing 
When Running Custom Tests We Add #![reexport_test_harness_main = "test_main"] Because We Are Using No Main Which Also Means No Main For Tests So We Change The Name Then 
If We Are Running A Test We Call It Inside Of _start

We Also Add This Which When Testing Append Args To QUEMU
[package.metadata.bootimage] 
test-args = ["-device", "isa-debug-exit,iobase=0xf4,iosize=0x04"]


 Port 0xf4, 4 bytes
Then We Write A number To This Port (0 or 1) 1 = "(1 << 1) | 1 = 3" 0 = "(0 << 1) | 1 = 1"
We Use The x86_64 Crate To Do This