#| Note These Are All In Order Of What I Am Working On - Also Do Not Start On User Space Yet

IMPORTANT -- |

make multiproccesing - SMP
add more tests
test on real hardware and double check the timings are correct as QEMU may be giving incorrect timings
enter user mode with init program
make schedular for user mode - make PCB (process controll block) and every LAPIC timer interrupt switch task and registers (depending on usage and priority levels)
implement system calls
move drivers to user mode
make virtual file system
make SATA driver and connect to VFS
make scalable fonts - the current font is locked at a certain pixel size and is blocky looking and we need scalable fonts for a GUI
implement Unix Domain Sockets - type of IPC that uses memory locations
Make a starter GUI using the Unix Domain Sockets to communicate with the kernel
Port a doom engine and run it inside of a GUI window - not that hard using doom generic
Make A secure login screen using Hashing - Set New Password: 1. get new password 2. hash 3. store hash in file with highest permissions, Login With Password: 1. hash login password 2. get correct password hash 3. Compare  - make sure to drop(password) before starting any user processes
make function to power of machine using ACPI
PCI driver
NIC drivers - there is drivers in the linux kernel we can use for a reference - https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/net/ethernet a good starter driver that can also be used with QEMU is located here: https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/net/ethernet/realtek/8139too.c
Port rust compiler
make programs - games, web browser - for testing purposes
make package manager or port package manager - could probably just straight up port pacman at this point
add in OS live updating for the OS - use github to check for the latest version then pull required files and replace old files 
Port NVIDIA/AMD GPU DRIVERS - im not going to try to write GPU drivers from scratch with next to 0 info about the workings so we dont really have a choice

NOT IMPORTANT -- |

fix QEMU UEFI booting from clearing the console causing the tests in the testing framework not to show right
get GDB to work properly
wireless internet - this is not needed until we have a bunch of ethernet drivers but here are the links to the linux wireless internet drivers for reference: https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/drivers/net/wireless